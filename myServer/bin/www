#!/usr/bin/env node

// bin디렉토리의 www는 app.js파일을 가져와서 http모듈을 이용해서 서버를 등록한다.
// 그리고 서버 등록 중 문제에 대해 처리하는 역할을 한다.
// 서버 등록 중 문제가 발생하지 않았는지 설정하고 서버를 몇 번 포트에서 열지 설정한다.

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
// process.env를 이용하려면 .env파일을 생성하자!
// normalizePort()는 아래에서 정의된 함수다.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// onError, onListening의 경우 해당 파일의 하단에 정의되어 있다.
// 서버 실행 중 문제가 발생하면 발동하는 이벤트이다.
server.on('error', onError);
// 서버가 정상적으로 실행되면 발동하는 이벤트이다.
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  // parseInt()의 두번째 인자는 첫번째 인자를 몇진수로 변환할 것인지 알려주는 곳이다.
  // parseInt()의 두번째 인자의 기본 값은 10이 아니니 주의하자!
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
